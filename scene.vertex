#version 330

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 textCoord;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;    // Vertex Shader properties 

// Camera Interface block
out VS_OUT
{
	vec3 FragPos;
	vec2 TextCoord;
	vec3 FragNormal; // 3D Vector for Fragment Normal
	// 3D Vectors for Tangent Space
	vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
}vs_out;


uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
// Uniform properties of the Light and View Position in a Vertex Shader
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	vs_out.FragPos = vec3(model * vec4(position, 1.0)); // Formula for Fragment Position of model
	vs_out.TextCoord = textCoord;

	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vs_out.FragNormal = normalMatrix * normal; // Formula for Fragment Normal
	// Calculate the Normal Matrix of Tangent and Normal Space in a model
	vec3 T = normalize(normalMatrix * tangent);
	vec3 N = normalize(normalMatrix * normal);
	T = normalize(T - dot(T, N) * N);
	vec3 B = cross(N, T); 

	// Calculating Tangent Space
    mat3 TBN = transpose(mat3(T, B, N));
    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;

	vs_out.FragNormal = TBN * vs_out.FragNormal; // Formula for Frag Normal for the camera
}